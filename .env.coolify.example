# ===================================
# Configuration Coolify - Projet-0
# ===================================
# Copiez ce fichier et configurez les variables pour votre déploiement Coolify
# Dans Coolify, allez dans Environment Variables et ajoutez ces variables

# ===================================
# DOMAINES
# ===================================
# Domaine pour le frontend (ex: app.prestacoode.com ou votre-domaine.com)
FRONTEND_DOMAIN=app.prestacoode.com

# Domaine pour le backend API (ex: api.prestacoode.com ou api.votre-domaine.com)
BACKEND_DOMAIN=api.prestacoode.com

# ===================================
# DATABASE (PostgreSQL)
# ===================================
POSTGRES_USER=postgres
# IMPORTANT: Générez un mot de passe sécurisé
# Commande: openssl rand -base64 32
POSTGRES_PASSWORD=CHANGE_ME_SECURE_PASSWORD_HERE
POSTGRES_DB=projet0_db

# ===================================
# BACKEND - Configuration générale
# ===================================
NODE_ENV=production
PORT=3000

# Database URL (ne modifiez pas si vous utilisez le docker-compose fourni)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public

# ===================================
# BACKEND - JWT Configuration
# ===================================
# IMPORTANT: Générez un secret JWT de 64 caractères
# Commande Linux/Mac: openssl rand -hex 32
# Commande PowerShell: [Convert]::ToBase64String((1..32 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))
JWT_SECRET=CHANGE_ME_64_CHARACTERS_SECRET_KEY_HERE
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# ===================================
# BACKEND - CORS Configuration
# ===================================
# Domaine autorisé pour CORS (doit correspondre au FRONTEND_DOMAIN)
CORS_ORIGIN=https://app.prestacoode.com

# ===================================
# BACKEND - Admin par défaut
# ===================================
# Ces informations seront utilisées pour créer le compte admin initial
ADMIN_EMAIL=admin@projet0.com
# IMPORTANT: Changez ce mot de passe après la première connexion
ADMIN_PASSWORD=CHANGE_ME_STRONG_PASSWORD
ADMIN_USERNAME=admin

# ===================================
# BACKEND - Google OAuth (Optionnel)
# ===================================
# Si vous utilisez l'authentification Google, configurez ces variables
# Sinon, laissez-les vides
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
# L'URL de callback doit correspondre à votre domaine backend
GOOGLE_CALLBACK_URL=https://api.prestacoode.com/auth/google/callback

# ===================================
# BACKEND - Configuration avancée
# ===================================
# Niveau de log (error, warn, info, debug)
LOG_LEVEL=info

# Rate Limiting (protection contre les abus)
# Fenêtre de temps en millisecondes (15 minutes par défaut)
RATE_LIMIT_WINDOW_MS=900000
# Nombre maximum de requêtes par fenêtre
RATE_LIMIT_MAX=100

# ===================================
# FRONTEND - Configuration
# ===================================
# URL de l'API backend (doit correspondre au BACKEND_DOMAIN)
VITE_API_URL=https://api.prestacoode.com

# ===================================
# NOTES IMPORTANTES
# ===================================
# 
# 1. SÉCURITÉ:
#    - Ne commitez JAMAIS ce fichier avec de vraies valeurs
#    - Générez des secrets forts et uniques pour chaque déploiement
#    - Changez le mot de passe admin après la première connexion
#
# 2. DOMAINES:
#    - Assurez-vous que vos DNS pointent vers votre serveur Coolify
#    - Coolify configurera automatiquement les certificats SSL (Let's Encrypt)
#
# 3. DATABASE:
#    - Les données de la base seront persistées dans un volume Docker
#    - Configurez des backups réguliers dans Coolify
#
# 4. APRÈS LE DÉPLOIEMENT:
#    - Exécutez les migrations Prisma: npx prisma migrate deploy
#    - Générez le client Prisma: npx prisma generate
#    - Seedez la base de données: npx prisma db seed
#
# 5. MONITORING:
#    - Surveillez les logs dans l'interface Coolify
#    - Vérifiez les health checks régulièrement
#    - Configurez des alertes pour les services critiques
#
# ===================================
# GÉNÉRATION DES SECRETS
# ===================================
#
# JWT_SECRET (64 caractères):
# Linux/Mac:
#   openssl rand -hex 32
# PowerShell:
#   [Convert]::ToBase64String((1..32 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))
#
# POSTGRES_PASSWORD (32 caractères):
# Linux/Mac:
#   openssl rand -base64 32
# PowerShell:
#   Add-Type -AssemblyName System.Web
#   [System.Web.Security.Membership]::GeneratePassword(32, 10)
#
# ADMIN_PASSWORD (16+ caractères):
#   Utilisez un gestionnaire de mots de passe pour générer un mot de passe fort
#
# ===================================
